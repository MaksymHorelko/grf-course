#include <iostream>
#include <NTL/ZZ.h>
#include <vector>

using namespace std;
using namespace NTL;

vector<ZZ> calculatePartitialSecret(ZZ s0, vector<ZZ> m_vec)
{
  vector<ZZ> partitialSecret;
  int size = m_vec.size();
  for (int i = 1; i < size; i++)
  {
    partitialSecret.push_back(s0 % m_vec[i]);
  }

  return partitialSecret;
}

ZZ calculateIntermediateSecret(ZZ s, ZZ r0, ZZ m0)
{
  return s + r0 * m0;
}

void task1()
{
  cout << "Завдання 1" << endl;
  ZZ n, k, s, s0, r0;

  n = 4;
  k = 3;
  s = 128;

  vector<ZZ> m_vec; // mi
  m_vec.push_back(to_ZZ(317));
  m_vec.push_back(to_ZZ(2677));
  m_vec.push_back(to_ZZ(5039));
  m_vec.push_back(to_ZZ(13009));
  m_vec.push_back(to_ZZ(21523));

  r0 = 33516283;
  s0 = calculateIntermediateSecret(s, r0, m_vec[0]);                 // s0
  vector<ZZ> partitialSecrets = calculatePartitialSecret(s0, m_vec); // bi

  for (int i = 0; i < n; i++)
  {
    cout << "Учасник № " << i + 1 << ": " << partitialSecrets[i] << "\t";
    cout << m_vec[i + 1] << "\t" << m_vec[0] << endl;
  }
  cout << endl;
}

void task2()
{
  cout << "Завдання 2" << endl;
  ZZ n, k, s, s0, r0;

  n = 4;
  k = 3;
  s = power2_ZZ(4096);

  vector<ZZ> m_vec; // mi
  m_vec.push_back(conv<ZZ>("2136878424672661000513441136930046313756544314587198089104860405326524686302982008618277751544098989331585758711550325982873893076061223024128258440286241022718191014215975117482844913641702572261927415515502940061257219114788401708542519958284967722431827048914341850795352739777475375658343452290775051795199601702833008132970270768018929194667173358723294132414056065598150440853106281372016284562657374876124104069742796843615101965275696629561879031139315176548333085439687614583321547680994013936270330654271839871681748877885809928279697690056744967569003955059196779978454186149513628533782781697747298769909131057441250961021863958305455380309428592633528729908456759832838329403802878725153243651418218869690841679437096171370293400575339274056199400420270539900836303377629866632960328120023393296556562895822858632165954608918074434841540621281180477218394766578907669227527406057296706275287612404413100937061028135095344189421654549927308703194763920311085983280689774237058792083792695440028347845604173698471020075103632430460654728513776249020641127768763221138475696591296039484757617755960624096958218554028483445710762937795255233345498440738074704275768508462258014420279051115648983937266002374305182303872002817"));
  m_vec.push_back(conv<ZZ>("20392602271358083939966429614327364677782358744896343473263829681183748992499369660807860455019878139058699134699804802630964423440225426560423659931594840318721179890334681122036332406488066101507767425228914291377418202335967719454832355528439323615982898504485277954886878632429377250206021992708620494066011357782225202059300397858673065847024129946930745831401011816298599236162275883147264038155957615807190385053772825217865889299820405274424768580723036605230265868682733055769576264018760025599221760006947133802605702828511654111737015269915320117888652242643761197750109722221237328531928420670880465590695056894519931103360861497350887133813664360389303390744703489675835222088457654869175798142343736085354993253676595397243605812213333247217227151328561441896793139652803774512457803277491004249031966906514382727663583099313107795807168579098460929023892416494066580876666780940345780060895015227511454396254893002119993084556442227216670879098697531122692657273655517390805221876193148865308334261169585823682717263103390321264609773084034407823050930860627220775577362055851893666842080029395809566684717673376931928384483849497192728698074428669109012008556693954537942835218600892330880522431357146126903258516719351"));
  m_vec.push_back(conv<ZZ>("40891848150722822062522667365749830289711724904952913640634064501952130947724122408966715530055569498510489017826902878820083768539062881392111540621097494229010867211031327899772012328845022526514978697950162878842213682024666723257121735007413157973482355368102242333466040922072946923807449753710762357239514426469082185808825493402260995317730202330959952848438089714920342689336641711604904994812851403227459593013390138338423147101960281527839749425239540563013421532590793066253231836833932446310243662731200107201669747846583438926970194302509912418964190236915152611557888038375226263856904153194438380839359520830486490240531823221903929980489274462226058949788884982382437605640096811646863784724355061831655067681328194479830174589957381518651374007475220593506006679101002334296840457420414300199830947884240792658783616395680425776778180316136257329173769789517155109180050798573445412500126695656244370447173698717663950569561687155208863480855604048298946884080675629348499747570337235726865272209365715036754340072483247374499644461402900609389249410353477763967924680011671988221127164391412653890141512931653220033816190638928426414387589890151611440087212637381411191646995560845119533640056983729702528327899344207"));
  m_vec.push_back(conv<ZZ>("131437218994537437006894184727047987593133484475039435691131992054325936200000137326288471926251882442025766803043835460175426287347103762521734080596804912350526106388389088617443234813819746682828406420482654464765698178565554989526884985187287484062133827696627194262911633752037032011827986567923705039553097307493981343117689506549812216234237282881830226126730958461572365931859895147128165576562153349277048822763653989453805485911886291633426622165548601610521510284856761760165119203468010809031181364615181009638899031160010945868018350959365043358337953760483468345148875044145106825632965157462974962632492731427810957454468827770522300726644247843816908115535016482761759170465662571970756755690846805433203131835855550082989240189141371051986972373480230508044740705191712489202108918631762487681501995330062293560209450088587668554705559984911126422177027201155566237168318504393576962008206118515122521587752102603003523213900955521010801615041777617804547158186244817149563886916442079865013527104577869124557932623381690870670900454410078197617840468328865366513028481933532800349331435012867773031242106027623258339612625128454207031180319413450645141057911402373079259194886842573596727262725962063752769090064366707"));
  m_vec.push_back(conv<ZZ>("151492239341422914128646871740108946557038830610839267323070576328398439206014241246320050430375735215006012525233713057369872084251739497868773484527132843623103222348932352677186555199559620396580914946911679783600791246041762585226026215730595136180900291273972679151816104472293449727730437450059448288505892445293087768714869385040674164277858262678162839555581932986213067612752926426037589318832360865807185363426782409045267067095156564904003049910398289348914759120040657063713214527467816372571862464368336382020785152580505891331171217730609153651884408889459662441485138825867931038183390403691111545033304390821576975893552630907560839934942071953377545437326497670489105886048190667281750567983674035259895076107209403835835049219426261705014127955961843789490774506323146825071433757386976697184990205916470991049183515998127262454735963878522536214982356430979634688353008694444543276731166011101540730745662554317619051911524964233845603709875811608304211025384850729392875311963176015996094718556658890937920357767507710848270622517875614316625895151696336327813183040083661325217971348333268980753741847767662185733408055327137052568600326411768114063283854471087185860937520706401983009634519653639860887311490803727"));

  r0 = conv<ZZ>("2153197863476012269698978167532748453556510449506098617066866771706353594760745467018631645989321318589453723603588730395599372698289861850851665777302563177004747960754698485759978343071451542227870586209694852611370664923451486004500180663089005657423832331737995907959844119851342732744837648743222848112555432834490591640915222440473319564341857117493325563438951455722717871829204923435928631010743534956541632619655172026944417176433774656851241268259889498699905496261795402913842178892786828332475540355320454908192398223469198969856396203294631611909175374716821879884156359659611155745916940659116004575345063073576647415325896795195324692798299491952544344661077895213013435664486142986742464037739029633067179369800552776118245514177889052653537070424417692944043443412094986951130045850237459561478522584216910358712444442659252446003475489767893991829950800130914650985313144296050443326357911692182039905667773020293887713935329484984201531901877973425928758151539722540772044337444363387547251029838809941132769406545653294784229812285017459005641978234544673618714081646750021752212699497712457358724322829902469836622459201944115902661644364110868247257332592744639625175957430245445455237205985089672748352568717248074350777525277413235370881204442203602819670935432067848500067222208447548458572704489099108441787040251790941018183019377467131387669489632514836139783773108059054879635169122193004256986214293695022363975083512535529786922218476011433093661642428823467848731401065976417875317920677046534309908959806481369063399052734810871615780948608596586726308320074732385987436116381154780323530410301137875839991187225165715780632312890025007169860379097723121998128587974235448513764191643655946692832849278743886966239807213189077985943107817292748607777411876730710444921193045959724046026728430884695219153647477105434453041319421637728481799705375635215489247564805880566793179199205058092317578602360454144914124799142195702239259267930806524280081662189125034086838943037581729487804292724090357354869066909651244929937391553917307737885499371299123561712843728546524460638451965084880738079025104643600824372352241538009189381487215254471160715122960314777153051775981441677861543398323500894540443884899403595042952835717740710164415367361370626016943980684852558913294560328240113789951292284657913519045513063785957369594869294144326385857316457057473259144746123389490791506267468584505693307667590822816620065331230618337590487237");
  s0 = calculateIntermediateSecret(s, r0, m_vec[0]);                 // s0
  vector<ZZ> partitialSecrets = calculatePartitialSecret(s0, m_vec); // bi

  for (int i = 0; i < n; i++)
  {
    cout << "Учасник № " << i + 1 << ": " << partitialSecrets[i] << "\t";
    cout << m_vec[i + 1] << "\t" << m_vec[0] << endl;
  }
}
int main()
{
  task1();
  task2();
  return 0;
}
